#ifndef SGP_VOBJECT_BLITTERS_32
#define SGP_VOBJECT_BLITTERS_32

#include "Types.h"
#include "VObject.h"
#include "VSurface.h"
#include <stdint.h>
struct SDL_Texture;


template<typename T>
struct Blitter
{
	//
	// Input arguments
	//
	T *                      buffer;
	int                      pitch;
	std::uint16_t            srcObjectIndex;
	SGPVObject const *       srcVObject;
	int                      x;
	int                      y;
	SGPRect const *          clipregion{ nullptr };

	// Only used by MonoShadow
	T                        Foreground;
	T                        Background;
	T                        Shadow;

protected:
	//
	// Blitting parameters generated by ParseArgs
	//
	int                      TempX;
	int                      TempY;
	int                      LeftSkip;
	int                      RightSkip;
	int                      BottomSkip;
	int                      LineSkip;
	int                      BlitLength;
	int                      BlitHeight;
	T *                      DstPtr;
	uint8_t const *          SrcPtr;

	SDL_Texture *            texture{ nullptr };

public:
	Blitter() = default;
	Blitter(SGPVSurface *);
	Blitter(SDL_Texture *);
	~Blitter();

	// Returns false if we can skip blitting because we are
	// outside the clipping rect.
	bool ParseArgs();

	void MonoShadow();
	void Transparent();
};
constexpr int ffff = sizeof(Blitter<uint16_t>);

#endif
